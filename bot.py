# bot.py
import logging
import html
import os
from http import HTTPStatus

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
from aiohttp import web

# –ë–æ—Ç
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = "8191852280:AAFcOI5tVlJlk4xxnzxAgIUBmW4DW5KElro"  # ‚Üê –ó–∞–º–µ–Ω–∏!
GROUP_ID = -1003033000994  # ‚Üê –ó–∞–º–µ–Ω–∏!
PORT = int(os.environ.get("PORT", 10000))  # Render –ø–µ—Ä–µ–¥–∞—ë—Ç PORT

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä: —Ä–∞–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ===
async def handle_root(request):
    return web.Response(text="Bot is running", status=HTTPStatus.OK)

# === –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ===
async def run_web_server():
    app = web.Application()
    app.router.add_get("/", handle_root)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# === –ë–æ—Ç: /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç {user.full_name}")
    keyboard = [[{"text": "üé• –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—ã", "web_app": {"url": "https://cameri-github-io.onrender.com"}}]]
    reply_markup = {"inline_keyboard": keyboard}
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ web_app_data ===
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = update.effective_message.web_app_data.data
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
        import json
        data = json.loads(data)
        event_type = data.get("type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        camera = data.get("camera", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        timestamp = data.get("timestamp", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        user = update.effective_user

        text = (
            f"üö® <b>–°–æ–±—ã—Ç–∏–µ:</b> {html.escape(event_type)}\n"
            f"üìπ <b>–ö–∞–º–µ—Ä–∞:</b> {html.escape(camera)}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {html.escape(user.full_name)}\n"
            f"üÜî <b>ID:</b> {user.id}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {timestamp}"
        )

        await context.bot.send_message(chat_id=GROUP_ID, text=text, parse_mode="HTML")
        await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ ===
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await run_web_server()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(API_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç—å loop
    try:
        await application.updater.start_polling()
        await application.start()
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—Ç–µ
        while True:
            await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    finally:
        await application.stop()
        await application.updater.stop()


# === –ó–∞–ø—É—Å–∫ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Render) ===
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
